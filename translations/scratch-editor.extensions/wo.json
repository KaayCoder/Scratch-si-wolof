{
    "boost.color.any": {
        "message": "wirgo bumu ci",
        "description": "any color"
    },
    "boost.color.black": {
        "message": "ñuul",
        "description": "the color black"
    },
    "boost.color.blue": {
        "message": "baxa",
        "description": "the color blue"
    },
    "boost.color.green": {
        "message": "nëtëx",
        "description": "the color green"
    },
    "boost.color.red": {
        "message": "xonq",
        "description": "the color red"
    },
    "boost.color.white": {
        "message": "weex",
        "description": ""
    },
    "boost.color.yellow": {
        "message": "mboq",
        "description": "the color yellow"
    },
    "boost.getMotorPosition": {
        "message": "motëër bi [MOTOR_REPORTER_ID] taxawaay",
        "description": "the position returned by the motor"
    },
    "boost.getTiltAngle": {
        "message": "turu koñ [TILT_DIRECTION]",
        "description": "the angle returned by the tilt sensor"
    },
    "boost.motorDirection.backward": {
        "message": "ci anam gee",
        "description": "label for backward element in motor direction menu for LEGO Boost extension"
    },
    "boost.motorDirection.forward": {
        "message": "ci anam gii",
        "description": "label for forward element in motor direction menu for LEGO Boost extension"
    },
    "boost.motorDirection.reverse": {
        "message": "wëlbëti",
        "description": "label for reverse element in motor direction menu for LEGO Boost extension"
    },
    "boost.motorOff": {
        "message": "fay motëër [MOTOR_ID] bi",
        "description": "turn a motor off"
    },
    "boost.motorOn": {
        "message": "taal motëër [MOTOR_ID] bi",
        "description": "turn a motor on indefinitely"
    },
    "boost.motorOnFor": {
        "message": "taal motëër bi  [MOTOR_ID] diiru [DURATION] saa",
        "description": "turn a motor on for some time"
    },
    "boost.motorOnForRotation": {
        "message": "wëlbati motëër bi [MOTOR_ID] ci [ROTATION] wëlbatiku",
        "description": "turn a motor on for rotation"
    },
    "boost.seeingColor": {
        "message": "gis [COLOR] brik?",
        "description": "is the color sensor seeing a certain color?"
    },
    "boost.setLightHue": {
        "message": "def wirgo wu leer wi  [HUE]",
        "description": "set the LED color"
    },
    "boost.setMotorDirection": {
        "message": "set motor [MOTOR_ID] direction [MOTOR_DIRECTION]",
        "description": "set the motor's turn direction without turning it on"
    },
    "boost.setMotorPower": {
        "message": "set motor [MOTOR_ID] speed to [POWER] %",
        "description": "set the motor's speed without turning it on"
    },
    "boost.tiltDirection.any": {
        "message": "bu mu ci",
        "description": "label for any element in tilt direction menu for LEGO Boost extension"
    },
    "boost.tiltDirection.down": {
        "message": "suuf",
        "description": "label for down element in tilt direction menu for LEGO Boost extension"
    },
    "boost.tiltDirection.left": {
        "message": "càmmooñ",
        "description": "label for left element in tilt direction menu for LEGO Boost extension"
    },
    "boost.tiltDirection.right": {
        "message": "nday-joor",
        "description": "label for right element in tilt direction menu for LEGO Boost extension"
    },
    "boost.tiltDirection.up": {
        "message": "kaw",
        "description": "label for up element in tilt direction menu for LEGO Boost extension"
    },
    "boost.whenColor": {
        "message": "su [COLOR] brik feeñee",
        "description": "check for when color"
    },
    "boost.whenTilted": {
        "message": "su tuddee [TILT_DIRECTION_ANY]",
        "description": "check when tilted in a certain direction"
    },
    "ev3.beepNote": {
        "message": "notu bip gi [NOTE] diiru [TIME] saa",
        "description": "play some note on EV3 for some time"
    },
    "ev3.buttonPressed": {
        "message": "bitoŋ bi [PORT] bësoo?",
        "description": "is a button on some port pressed?"
    },
    "ev3.getBrightness": {
        "message": "leeraay",
        "description": "gets measured brightness"
    },
    "ev3.getDistance": {
        "message": "soriwaay",
        "description": "gets measured distance"
    },
    "ev3.getMotorPosition": {
        "message": "motëër[PORT] taxawaay",
        "description": "get the measured degrees a motor has turned"
    },
    "ev3.motorSetPower": {
        "message": "motëër [PORT] def doole ji [POWER] %",
        "description": "set a motor's power to some value"
    },
    "ev3.motorTurnClockwise": {
        "message": "motëër [PORT] wëlbati ci wet gii [TIME] saa",
        "description": "turn a motor clockwise for some time"
    },
    "ev3.motorTurnCounterClockwise": {
        "message": "motëër [PORT] wëlbati wet gee [TIME] saa",
        "description": "turn a motor counter-clockwise for some time"
    },
    "ev3.whenBrightnessLessThan": {
        "message": "saasu leeraay < [DISTANCE]",
        "description": "when value measured by brightness sensor is less than some value"
    },
    "ev3.whenButtonPressed": {
        "message": "su bitoŋ bi [PORT] bësoo",
        "description": "when a button connected to a port is pressed"
    },
    "ev3.whenDistanceLessThan": {
        "message": "saasu soriwaay < [DISTANCE]",
        "description": "when the value measured by the distance sensor is less than some value"
    },
    "gdxfor.getAcceleration": {
        "message": "acceleration [DIRECTION]",
        "description": "gets acceleration"
    },
    "gdxfor.getForce": {
        "message": "doole",
        "description": "gets force"
    },
    "gdxfor.getSpin": {
        "message": "spin speed [DIRECTION]",
        "description": "gets spin speed"
    },
    "gdxfor.getTilt": {
        "message": "tilt angle [TILT]",
        "description": "gets tilt"
    },
    "gdxfor.isFreeFalling": {
        "message": "falling?",
        "description": "is the device in free fall?"
    },
    "gdxfor.isTilted": {
        "message": "tilted [TILT]?",
        "description": "is the device tilted?"
    },
    "gdxfor.pulled": {
        "message": "pulled",
        "description": "the force sensor was pulled outward"
    },
    "gdxfor.pushed": {
        "message": "pushed",
        "description": "the force sensor was pushed inward"
    },
    "gdxfor.shaken": {
        "message": "shaken",
        "description": "the sensor was shaken"
    },
    "gdxfor.startedFalling": {
        "message": "started falling",
        "description": "the sensor started free falling"
    },
    "gdxfor.tiltDirectionMenu.any": {
        "message": "bu mu ci",
        "description": "label for any direction element in tilt direction picker for gdxfor extension"
    },
    "gdxfor.tiltDirectionMenu.back": {
        "message": "ginnaaw",
        "description": "label for back element in tilt direction picker for gdxfor extension"
    },
    "gdxfor.tiltDirectionMenu.front": {
        "message": "kanam",
        "description": "label for front element in tilt direction picker for gdxfor extension"
    },
    "gdxfor.tiltDirectionMenu.left": {
        "message": "càmmooñ",
        "description": "label for left element in tilt direction picker for gdxfor extension"
    },
    "gdxfor.tiltDirectionMenu.right": {
        "message": "nday-joor",
        "description": "label for right element in tilt direction picker for gdxfor extension"
    },
    "gdxfor.turnedFaceDown": {
        "message": "turned face down",
        "description": "the sensor was turned to face down"
    },
    "gdxfor.turnedFaceUp": {
        "message": "turned face up",
        "description": "the sensor was turned to face up"
    },
    "gdxfor.whenForcePushedOrPulled": {
        "message": "when force sensor [PUSH_PULL]",
        "description": "when the force sensor is pushed or pulled"
    },
    "gdxfor.whenGesture": {
        "message": "Saasu [GESTURE]",
        "description": "when the sensor detects a gesture"
    },
    "gdxfor.whenTilted": {
        "message": "when tilted [TILT]",
        "description": "when the sensor detects tilt"
    },
    "makeymakey.downArrow": {
        "message": "fittu suuf",
        "description": "The down arrow key on a computer keyboard."
    },
    "makeymakey.downArrowShort": {
        "message": "suuf",
        "description": "Short name for the down arrow key on a computer keyboard."
    },
    "makeymakey.leftArrow": {
        "message": "fittu càmmooñ",
        "description": "The left arrow key on a computer keyboard."
    },
    "makeymakey.leftArrowShort": {
        "message": "càmmooñ",
        "description": "Short name for the left arrow key on a computer keyboard."
    },
    "makeymakey.rightArrow": {
        "message": "fittu nday-joor",
        "description": "The right arrow key on a computer keyboard."
    },
    "makeymakey.rightArrowShort": {
        "message": "nday-joor",
        "description": "Short name for the right arrow key on a computer keyboard."
    },
    "makeymakey.spaceKey": {
        "message": "diggante",
        "description": "The space key on a computer keyboard."
    },
    "makeymakey.upArrow": {
        "message": "fittu kaw",
        "description": "The up arrow key on a computer keyboard."
    },
    "makeymakey.upArrowShort": {
        "message": "kaw",
        "description": "Short name for the up arrow key on a computer keyboard."
    },
    "makeymakey.whenKeyPressed": {
        "message": "when [KEY] key pressed",
        "description": "when a keyboard key is pressed"
    },
    "makeymakey.whenKeysPressedInOrder": {
        "message": "when [SEQUENCE] pressed in order",
        "description": "when a sequence of keyboard keys is pressed in a specific order"
    },
    "microbit.buttonsMenu.any": {
        "message": "bu mu ci",
        "description": "label for \"any\" element in button picker for micro:bit extension"
    },
    "microbit.clearDisplay": {
        "message": "clear display",
        "description": "display nothing on the micro:bit display"
    },
    "microbit.defaultTextToDisplay": {
        "message": "Mbaa jàmm rekk!",
        "description": "default text to display.\n                                IMPORTANT - the micro:bit only supports letters a-z, A-Z.\n                                Please substitute a default word in your language\n                                that can be written with those characters,\n                                substitute non-accented characters or leave it as \"Hello!\".\n                                Check the micro:bit site documentation for details"
    },
    "microbit.displaySymbol": {
        "message": "display [MATRIX]",
        "description": "display a pattern on the micro:bit display"
    },
    "microbit.displayText": {
        "message": "display text [TEXT]",
        "description": "display text on the micro:bit display"
    },
    "microbit.gesturesMenu.jumped": {
        "message": "tëb",
        "description": "label for jumped gesture in gesture picker for micro:bit extension"
    },
    "microbit.gesturesMenu.moved": {
        "message": "yëngatu",
        "description": "label for moved gesture in gesture picker for micro:bit extension"
    },
    "microbit.gesturesMenu.shaken": {
        "message": "yëngalee",
        "description": "label for shaken gesture in gesture picker for micro:bit extension"
    },
    "microbit.isButtonPressed": {
        "message": "[BTN] bitoŋ bi bësoo ?",
        "description": "is the selected button on the micro:bit pressed?"
    },
    "microbit.isTilted": {
        "message": "tilted [DIRECTION]?",
        "description": "is the micro:bit is tilted in a direction?"
    },
    "microbit.pinStateMenu.off": {
        "message": "fay",
        "description": "label for off element in pin state picker for micro:bit extension"
    },
    "microbit.pinStateMenu.on": {
        "message": "taal",
        "description": "label for on element in pin state picker for micro:bit extension"
    },
    "microbit.tiltAngle": {
        "message": "tilt angle [DIRECTION]",
        "description": "how much the micro:bit is tilted in a direction"
    },
    "microbit.tiltDirectionMenu.any": {
        "message": "bu mu ci",
        "description": "label for any direction element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.back": {
        "message": "gannaaw",
        "description": "label for back element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.front": {
        "message": "kanam",
        "description": "label for front element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.left": {
        "message": "Càmmooñ",
        "description": "label for left element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.right": {
        "message": "nday-joor",
        "description": "label for right element in tilt direction picker for micro:bit extension"
    },
    "microbit.whenButtonPressed": {
        "message": "saasu [BTN] bitoŋ bi bésoo",
        "description": "when the selected button on the micro:bit is pressed"
    },
    "microbit.whenGesture": {
        "message": "saasu [GESTURE]",
        "description": "when the selected gesture is detected by the micro:bit"
    },
    "microbit.whenPinConnected": {
        "message": "saasu pin [PIN] lënkoo",
        "description": "when the pin detects a connection to Earth/Ground"
    },
    "microbit.whenTilted": {
        "message": "when tilted [DIRECTION]",
        "description": "when the micro:bit is tilted in a direction"
    },
    "music.categoryName": {
        "message": "Mbuug",
        "description": "Label for the Music extension category"
    },
    "music.changeTempo": {
        "message": "change tempo by [TEMPO]",
        "description": "change tempo (speed) for notes, drums, and rests played"
    },
    "music.drumBass": {
        "message": "(2) Bass Drum",
        "description": "Sound of bass drum as used in a standard drum kit"
    },
    "music.drumBongo": {
        "message": "(13) Tama",
        "description": "Sound of a bongo being struck"
    },
    "music.drumCabasa": {
        "message": "(15) Cabasa",
        "description": "Sound of a cabasa being shaken"
    },
    "music.drumClaves": {
        "message": "(9) Claves",
        "description": "Sound of claves being struck together"
    },
    "music.drumClosedHiHat": {
        "message": "(6) Closed Hi-Hat",
        "description": "Sound of a drum stick hitting a hi-hat while closed"
    },
    "music.drumConga": {
        "message": "(14) Conga",
        "description": "Sound of a conga being struck"
    },
    "music.drumCowbell": {
        "message": "(11) Cowbell",
        "description": "Sound of a cowbell being struck"
    },
    "music.drumCrashCymbal": {
        "message": "(4) Crash Cymbal",
        "description": "Sound of a drum stick hitting a crash cymbal"
    },
    "music.drumCuica": {
        "message": "(18) Cuica",
        "description": "Sound of a cuica being played"
    },
    "music.drumGuiro": {
        "message": "(16) Guiro",
        "description": "Sound of a guiro being played"
    },
    "music.drumHandClap": {
        "message": "(8) Hand Clap",
        "description": "Sound of two hands clapping together"
    },
    "music.drumOpenHiHat": {
        "message": "(5) Open Hi-Hat",
        "description": "Sound of a drum stick hitting a hi-hat while open"
    },
    "music.drumSideStick": {
        "message": "(3) Side Stick",
        "description": "Sound of a drum stick hitting the side of a drum (usually the snare)"
    },
    "music.drumSnare": {
        "message": "(1) Snare Drum",
        "description": "Sound of snare drum as used in a standard drum kit"
    },
    "music.drumTambourine": {
        "message": "(7) Tambourine",
        "description": "Sound of a tambourine being struck"
    },
    "music.drumTriangle": {
        "message": "(12) Triangle",
        "description": "Sound of a triangle (instrument) being struck"
    },
    "music.drumVibraslap": {
        "message": "(17) Vibraslap",
        "description": "Sound of a Vibraslap being played"
    },
    "music.drumWoodBlock": {
        "message": "(10) Wood Block",
        "description": "Sound of a wood block being struck"
    },
    "music.getTempo": {
        "message": "tempo",
        "description": "get the current tempo (speed) for notes, drums, and rests played"
    },
    "music.instrumentBass": {
        "message": "(6) Bass",
        "description": "Sound of an accoustic upright bass"
    },
    "music.instrumentBassoon": {
        "message": "(14) Bassoon",
        "description": "Sound of a bassoon being played"
    },
    "music.instrumentCello": {
        "message": "(8) Cello",
        "description": "Sound of a cello being played with a bow"
    },
    "music.instrumentChoir": {
        "message": "(15) Choir",
        "description": "Sound of a choir singing"
    },
    "music.instrumentClarinet": {
        "message": "(10) Clarinet",
        "description": "Sound of a clarinet being played"
    },
    "music.instrumentElectricGuitar": {
        "message": "(5) Electric Guitar",
        "description": "Sound of an electric guitar"
    },
    "music.instrumentElectricPiano": {
        "message": "(2) Electric Piano",
        "description": "Sound of an electric piano"
    },
    "music.instrumentFlute": {
        "message": "(12) Flute",
        "description": "Sound of a flute being played"
    },
    "music.instrumentGuitar": {
        "message": "(4) Guitar",
        "description": "Sound of an accoustic guitar"
    },
    "music.instrumentMarimba": {
        "message": "(19) Marimba",
        "description": "Sound of a marimba being struck"
    },
    "music.instrumentMusicBox": {
        "message": "(17) Music Box",
        "description": "Sound of a music box playing"
    },
    "music.instrumentOrgan": {
        "message": "(3) Organ",
        "description": "Sound of an organ"
    },
    "music.instrumentPiano": {
        "message": "(1) Piano",
        "description": "Sound of a piano"
    },
    "music.instrumentPizzicato": {
        "message": "(7) Pizzicato",
        "description": "Sound of a string instrument (e.g. violin) being plucked"
    },
    "music.instrumentSaxophone": {
        "message": "(11) Saxophone",
        "description": "Sound of a saxophone being played"
    },
    "music.instrumentSteelDrum": {
        "message": "(18) Steel Drum",
        "description": "Sound of a steel drum being struck"
    },
    "music.instrumentSynthLead": {
        "message": "(20) Synth Lead",
        "description": "Sound of a \"lead\" synthesizer being played"
    },
    "music.instrumentSynthPad": {
        "message": "(21) Synth Pad",
        "description": "Sound of a \"pad\" synthesizer being played"
    },
    "music.instrumentTrombone": {
        "message": "(9) Trombone",
        "description": "Sound of a trombone being played"
    },
    "music.instrumentVibraphone": {
        "message": "(16) Vibraphone",
        "description": "Sound of a vibraphone being struck"
    },
    "music.instrumentWoodenFlute": {
        "message": "(13) Wooden Flute",
        "description": "Sound of a wooden flute being played"
    },
    "music.midiPlayDrumForBeats": {
        "message": "play drum [DRUM] for [BEATS] beats",
        "description": "play drum sample for a number of beats according to a mapping of MIDI codes"
    },
    "music.midiSetInstrument": {
        "message": "set instrument to [INSTRUMENT]",
        "description": "set the instrument for notes played according to a mapping of MIDI codes"
    },
    "music.playDrumForBeats": {
        "message": "play drum [DRUM] for [BEATS] beats",
        "description": "play drum sample for a number of beats"
    },
    "music.playNoteForBeats": {
        "message": "play note [NOTE] for [BEATS] beats",
        "description": "play a note for a number of beats"
    },
    "music.restForBeats": {
        "message": "rest for [BEATS] beats",
        "description": "rest (play no sound) for a number of beats"
    },
    "music.setInstrument": {
        "message": "set instrument to [INSTRUMENT]",
        "description": "set the instrument (e.g. piano, guitar, trombone) for notes played"
    },
    "music.setTempo": {
        "message": "set tempo to [TEMPO]",
        "description": "set tempo (speed) for notes, drums, and rests played"
    },
    "pen.categoryName": {
        "message": "Xalima",
        "description": "Label for the pen extension category"
    },
    "pen.changeColorParam": {
        "message": "soppi xalima  [COLOR_PARAM] muy [VALUE]",
        "description": "change the state of a pen color parameter"
    },
    "pen.changeHue": {
        "message": "soppi wirgo xalima gi muy [HUE]",
        "description": "legacy pen blocks - change pen color"
    },
    "pen.changeShade": {
        "message": "change pen shade by [SHADE]",
        "description": "legacy pen blocks - change pen shade"
    },
    "pen.changeSize": {
        "message": "change pen size by [SIZE]",
        "description": "change the diameter of the trail left by a sprite"
    },
    "pen.clear": {
        "message": "far lépp",
        "description": "erase all pen trails and stamps"
    },
    "pen.colorMenu.brightness": {
        "message": "leeraay",
        "description": "label for brightness element in color picker for pen extension"
    },
    "pen.colorMenu.color": {
        "message": "wirgo",
        "description": "label for color element in color picker for pen extension"
    },
    "pen.colorMenu.saturation": {
        "message": "feesaay",
        "description": "label for saturation element in color picker for pen extension"
    },
    "pen.colorMenu.transparency": {
        "message": "yaraaxaay",
        "description": "label for transparency element in color picker for pen extension"
    },
    "pen.penDown": {
        "message": "xalima gi jëm suuf",
        "description": "start leaving a trail when the sprite moves"
    },
    "pen.penUp": {
        "message": "xalima gi jëm kaw",
        "description": "stop leaving a trail behind the sprite"
    },
    "pen.setColor": {
        "message": "def wirgo xalima gi muy [COLOR]",
        "description": "set the pen color to a particular (RGB) value"
    },
    "pen.setColorParam": {
        "message": "def xalima [COLOR_PARAM] muy [VALUE]",
        "description": "set the state for a pen color parameter e.g. saturation"
    },
    "pen.setHue": {
        "message": "def wirgo xalima gi muy [HUE]",
        "description": "legacy pen blocks - set pen color to number"
    },
    "pen.setShade": {
        "message": "def takk-ndeeru xalima gi muy [SHADE]",
        "description": "legacy pen blocks - set pen shade"
    },
    "pen.setSize": {
        "message": "def rëyaayu xalima gi ŋuy [SIZE]",
        "description": "set the diameter of a trail left by a sprite"
    },
    "pen.stamp": {
        "message": "wiñet",
        "description": "render current costume on the background"
    },
    "speech.defaultWhenIHearValue": {
        "message": "Nanu dem",
        "description": "The default phrase/word that, when heard, triggers the event."
    },
    "speech.extensionName": {
        "message": "Dawalal Mbind mi",
        "description": "Name of extension that adds speech recognition blocks."
    },
    "speech.listenAndWait": {
        "message": "dégglu te xaar",
        "description": "Start listening to the microphone and wait for a result from the speech recognition system."
    },
    "speech.speechReporter": {
        "message": "kàddu",
        "description": "Get the text of spoken words transcribed by the speech recognition system."
    },
    "speech.whenIHear": {
        "message": "saasu ma déggee [PHRASE]",
        "description": "Event that triggers when the text entered on the block is recognized by the speech recognition system."
    },
    "text2speech.alto": {
        "message": "Nék",
        "description": "Name for a voice with ambiguous gender."
    },
    "text2speech.categoryName": {
        "message": "Mbind muy Kàddu",
        "description": "Name of the Text to Speech extension."
    },
    "text2speech.defaultTextToSpeak": {
        "message": "Mbaa jàmm rekk!",
        "description": "hello: the default text to speak"
    },
    "text2speech.giant": {
        "message": "Poõkal",
        "description": "Name for a funny voice with a low pitch."
    },
    "text2speech.kitten": {
        "message": "muus mu ndaw",
        "description": "A baby cat."
    },
    "text2speech.setLanguageBlock": {
        "message": "def làkk wi muy [LANGUAGE]",
        "description": "Set the language for speech synthesis."
    },
    "text2speech.setVoiceBlock": {
        "message": "def baat bi muy [VOICE]",
        "description": "Set the voice for speech synthesis."
    },
    "text2speech.speakAndWaitBlock": {
        "message": "wax [WORDS]",
        "description": "Speak some words."
    },
    "text2speech.squeak": {
        "message": "squeak",
        "description": "Name for a funny voice with a high pitch."
    },
    "text2speech.tenor": {
        "message": "digg doomu",
        "description": "Name for a voice with ambiguous gender."
    },
    "translate.categoryName": {
        "message": "Tekki",
        "description": "Name of extension that adds translate blocks"
    },
    "translate.defaultTextToTranslate": {
        "message": "Mbaa jàmm rekk!",
        "description": "hello: the default text to translate"
    },
    "translate.translateBlock": {
        "message": "tekki [WORDS] ci [LANGUAGE]",
        "description": "translate some text to a different language"
    },
    "translate.viewerLanguage": {
        "message": "làkk",
        "description": "the languge of the project viewer"
    },
    "videoSensing.categoryName": {
        "message": "Video Sensing",
        "description": "Label for the video sensing extension category"
    },
    "videoSensing.direction": {
        "message": "direction",
        "description": "Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.motion": {
        "message": "motion",
        "description": "Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.off": {
        "message": "fay",
        "description": "Option for the \"turn video [STATE]\" block"
    },
    "videoSensing.on": {
        "message": "taal",
        "description": "Option for the \"turn video [STATE]\" block"
    },
    "videoSensing.onFlipped": {
        "message": "on flipped",
        "description": "Option for the \"turn video [STATE]\" block that causes the video to be flipped horizontally (reversed as in a mirror)"
    },
    "videoSensing.setVideoTransparency": {
        "message": "set video transparency to [TRANSPARENCY]",
        "description": "Controls transparency of the video preview layer"
    },
    "videoSensing.sprite": {
        "message": "njuuma",
        "description": "Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.stage": {
        "message": "pàkk bi",
        "description": "Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.videoOn": {
        "message": "video [ATTRIBUTE] on [SUBJECT]",
        "description": "Reporter that returns the amount of [ATTRIBUTE] for the selected [SUBJECT]"
    },
    "videoSensing.videoToggle": {
        "message": "turn video [VIDEO_STATE]",
        "description": "Controls display of the video preview layer"
    },
    "videoSensing.whenMotionGreaterThan": {
        "message": "when video motion > [REFERENCE]",
        "description": "Event that triggers when the amount of motion is greater than [REFERENCE]"
    },
    "wedo2.getDistance": {
        "message": "soriwaay",
        "description": "the value returned by the distance sensor"
    },
    "wedo2.getTiltAngle": {
        "message": "tilt angle [TILT_DIRECTION]",
        "description": "the angle returned by the tilt sensor"
    },
    "wedo2.isTilted": {
        "message": "tilted [TILT_DIRECTION_ANY]?",
        "description": "whether the tilt sensor is tilted"
    },
    "wedo2.motorDirection.backward": {
        "message": "anam gee",
        "description": "label for backward element in motor direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorDirection.forward": {
        "message": "anam gii",
        "description": "label for forward element in motor direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorDirection.reverse": {
        "message": "wëlbati",
        "description": "label for reverse element in motor direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.a": {
        "message": "motor A",
        "description": "label for motor A element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.all": {
        "message": "all motors",
        "description": "label for all motors element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.b": {
        "message": "motor B",
        "description": "label for motor B element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.default": {
        "message": "motëër",
        "description": "label for motor element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorOff": {
        "message": "turn [MOTOR_ID] off",
        "description": "turn a motor off"
    },
    "wedo2.motorOn": {
        "message": "turn [MOTOR_ID] on",
        "description": "turn a motor on indefinitely"
    },
    "wedo2.motorOnFor": {
        "message": "turn [MOTOR_ID] on for [DURATION] seconds",
        "description": "turn a motor on for some time"
    },
    "wedo2.playNoteFor": {
        "message": "play note [NOTE] for [DURATION] seconds",
        "description": "play a certain note for some time"
    },
    "wedo2.setLightHue": {
        "message": "def wirgo wu leer wi  [HUE]",
        "description": "set the LED color"
    },
    "wedo2.setMotorDirection": {
        "message": "set [MOTOR_ID] direction to [MOTOR_DIRECTION]",
        "description": "set the motor's turn direction"
    },
    "wedo2.startMotorPower": {
        "message": "set [MOTOR_ID] power to [POWER]",
        "description": "set the motor's power and turn it on"
    },
    "wedo2.tiltDirection.any": {
        "message": "bu mu ci",
        "description": "label for any element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.down": {
        "message": "suuf",
        "description": "label for down element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.left": {
        "message": "càmmooñ",
        "description": "label for left element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.right": {
        "message": "nday-joor",
        "description": "label for right element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.up": {
        "message": "gaw",
        "description": "label for up element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.whenDistance": {
        "message": "su soriwaay bi [OP] [REFERENCE]",
        "description": "check for when distance is < or > than reference"
    },
    "wedo2.whenTilted": {
        "message": "su tuddee [TILT_DIRECTION_ANY]",
        "description": "check when tilted in a certain direction"
    }
}